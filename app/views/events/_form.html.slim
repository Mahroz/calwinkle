- persisted = @event.persisted?
.h4
  | #{ persisted ? 'Update' : 'Add' } Event
  hr
.event-form
  = form_for(@event, remote: !@event.persisted?, html: { id: 'event-form' }) do |f|
    = f.hidden_field :user_id, value: current_user.id
    .form-group
      h5
        | Event Name *
      = f.text_field :name, class: 'form-control', required: true
    .form-group
      h5
        | Event Description *
      = f.text_area :description, class: 'form-control', maxlength: 8000
    .form-group
      h5
        | Event Address *
      = f.text_field :address, class: 'form-control', id: 'autocomplete'
    .row.event-date-block
      .form-group.col-md-6.p-10-0
        .row
          .col-md-4.padding-0
            h5.mt-7 Start Date *
          .col-md-7.padding-0
            input.form-control(id="start_date" name="start_date" value="#{@event.start_date.strftime('%m/%d/%Y') rescue Date.today.strftime('%m/%d/%Y')}" autocomplete="off")


        .row
          .col-md-4.padding-0
            h5.mt-7.mt-7 Start Time *
          .col-md-7.padding-0
            input.form-control(name="start_time" data-role="datebox" data-datebox-mode="timebox" data-options='{"mode":"timebox"}' value="#{@event.formatted_start_time}")

      .form-group.col-md-6.p-10-0.endDateTime
        .row
          .col-md-4.padding-0
            h5.mt-7 End Date *
          .col-md-8.padding-0
            input.form-control(id="end_date" name="end_date" value="#{@event.end_date.strftime('%m/%d/%Y') rescue Date.today.strftime('%m/%d/%Y')}" autocomplete="off")
        .row
          .col-md-4.padding-0
            h5.mt-7 End Time *
          .col-md-8.padding-0
            input.form-control(name="end_time" data-role="datebox" data-datebox-mode="timebox" data-options='{"mode":"timebox"}' value="#{@event.formatted_end_time}")

    .row
      .col-md-12.padding-0.isMultiDayEvent
        h5
          = f.check_box :is_multi_day_event, {}, true, false
          |  Is Multi Day Event
        br
    .form-group
      h5
        | Time Zone *
      select.form-control id='event_time_zone' name='event[time_zone]' data-value=f.object.time_zone

    .row
      .col-md-6.padding-0
        .form-group
          h5
            | How often does it reoccurs?
          = f.hidden_field :occurance_type, id: 'event_occurance_type'
          = f.hidden_field :occurance_rule, id: 'event_occurance_rule'
          .occurance-dropdown.show
            a#dropdownMenuLink.btn aria-expanded="false" aria-haspopup="true" data-toggle="dropdown" href="#" role="button"
              = f.object.occurance_type
            .dropdown-menu aria-labelledby="dropdownMenuLink"
              - Event::occurance_types.each do |ocr_type, _ocr_id|
                a.dropdown-item.occurance-type href="#"
                  = ocr_type

      .col-md-6.padding-0          
        .form-group.repeatUntilField
          h5
            | Repeat Until
          input.form-control(id="repeat_until" name="repeat_until" value="#{@event.repeat_until.strftime('%m/%d/%Y') rescue Date.today.strftime('%m/%d/%Y')}" autocomplete="off")
    .form-group  
      .custom-occurance-fields.form-group
        .form-group.col-md-12.p-10-0
          .row
            .col-md-4.padding-0
              h5.mt-7 Repeat Every:
            .col-md-8.padding-0
              = f.number_field :custom_occurance_every_duration, class: 'form-control', min: 1, value: (@event.custom_occurance_every_duration || 1), style: 'width: 49%; float: left;'
              = f.select :custom_occurance_every_duration_type, options_for_select(['days', 'weeks', 'months', 'years'], @event.custom_occurance_every_duration_type), {}, {class: 'form-control', min: 1, style: 'width: 49%; float: right;'}


          br /
          .row.monthly-sub-type-selection
            .col-md-12.padding-0
              = f.select :custom_occurance_monthly_sub_type, options_for_select(monthly_sub_type_options(@event.start_date), @event.custom_occurance_monthly_sub_type), {}, {class: 'form-control'}
          br /
          .row.week-days-selection
            .col-md-4.padding-0
              h5.mt-7 Repeat On:
            .col-md-8.padding-0
              - week_days.each do |day|

                label.checkbox-inline
                  = f.check_box :custom_occurance_weekly_selected_days, {multiple: true, id: 'inlineCheckbox'}, day.downcase, false
                  = day.first.upcase

          .row
            .col-md-12.padding-0
              br /
              h4 Ends:
            .col-md-4.padding-0
              .radio
                label
                  = f.radio_button :custom_occurance_ends_on_type, 'none', :checked => @event.custom_occurance_ends_on_type == 'none'
                  | None
            .col-md-8.padding-0

            .col-md-4.padding-0
              br /
              .radio
                label
                  = f.radio_button :custom_occurance_ends_on_type, 'on', :checked => @event.custom_occurance_ends_on_type == 'on'
                  | On
            .col-md-8.padding-0
              = f.date_field :custom_occurance_repeat_ends_at, class: 'form-control'
            .col-md-4.padding-0
              br /
              .radio
                label
                  = f.radio_button :custom_occurance_ends_on_type, 'after', :checked => @event.custom_occurance_ends_on_type == 'after'
                  | After
            .col-md-8.padding-0
              .input-group
                = f.number_field :custom_occurance_ends_after_duration, class: 'form-control', min: 1, value: (@event.custom_occurance_ends_after_duration || 1)
                span#basic-addon2.input-group-addon occurances


    br/
    h5
      | IMAGE UPLOAD
      label
        |  ( Event Main Picture - suggested size: 1600x400 )
    .form-group
      .upload-btn-block
        = f.label :main_picture, 'Upload Event Image', class: 'btn btn-info'
        = f.file_field :main_picture, class: 'form-control file-input', accept: 'image/*'
      .uploaded-block.hidden
        .img-block
          i.fa.fa-check
          span Image Uploaded :)
        .replace-img-block
          a href='#' id='replace-img-btn' Replace Image

    .form-group
      h5
        | Organizer Name
      = f.text_field :organizer_name, class: 'form-control'

    .form-group
      h5
        | Organizer Phone
      = f.number_field :organizer_phone, class: 'form-control'

    .form-group
      h5
        | Organizer Email
      = f.email_field :organizer_email, class: 'form-control'

    .form-group
      h5
        | Organizer Website
      = f.text_field :organizer_website, class: 'form-control'

    .form-group
      h5
        | Organizer Picture
        br/
        br/
        = f.label :organizer_picture, 'Upload Organizer Image', class: 'btn btn-info'
        = f.file_field :organizer_picture, class: 'form-control file-input', accept: 'image/*'

    .form-group.btn-center
      button#event-create-btn.btn.btn-primary type='submit' #{persisted ? 'Update' : 'Add'}

javascript:
  var toggleRepeatUntilField = function(){
    var occuranceType = $('#event_occurance_type').val()
    if (occuranceType != 'Do not repeat') {
      $('.repeatUntilField').show()
    }
    else{
      $('.repeatUntilField').hide()
    }
  }

  var toggleCustomOccuranceFields = function(){
    var occuranceType = $('#event_occurance_type').val()
    if (occuranceType == 'Custom') {
      $('.custom-occurance-fields').show()
    }
    else{
      $('.custom-occurance-fields').hide()
    }
  }
  var toggleCustomOccuranceMonthlySubTypeSelector = function(){
    var customOccuranceEveryDurationType = $('#event_custom_occurance_every_duration_type').val()
    if (customOccuranceEveryDurationType == 'months') {
      $('.monthly-sub-type-selection').show()
    }
    else{
      $('.monthly-sub-type-selection').hide()
    }
  }

  var toggleCustomOccuranceWeekDaysSelector = function(){
    var customOccuranceEveryDurationType = $('#event_custom_occurance_every_duration_type').val()
    if (customOccuranceEveryDurationType == 'weeks') {
      $('.week-days-selection').show()
    }
    else{
      $('.week-days-selection').hide()
    }
  }

  var toggleCustomOccuranceEndsOptions = function(){
    var customOccuranceEndsType = $('input[name="event[custom_occurance_ends_on_type]"]:checked').val()
    if (customOccuranceEndsType == 'none'){
      $('#event_custom_occurance_repeat_ends_at').val("").removeAttr('required').attr('readonly', true)
      $('#event_custom_occurance_ends_after_duration').val('').removeAttr('required').attr('readonly', true)
    }
    else if (customOccuranceEndsType == 'on'){
      $('#event_custom_occurance_repeat_ends_at').removeAttr("readonly").attr('required', 'required')
      $('#event_custom_occurance_ends_after_duration').val('').removeAttr('required').attr('readonly', true)
    }

    else if (customOccuranceEndsType == 'after'){
      $('#event_custom_occurance_repeat_ends_at').val("").removeAttr('required').attr('readonly', true)
      $('#event_custom_occurance_ends_after_duration').removeAttr("readonly").attr('required', 'required')
    }
  }

  

  var toggleEndDateTimeFieldOnIsMultiDayEventChange = function(){
    if($('#event_is_multi_day_event').prop('checked')){
      $('.endDateTime').show();
      $('.endDateTime').find('input').val('').prop('required', 'required');
    } else {
      $('.endDateTime').find('input').val('').removeAttr('required')
      $('.endDateTime').hide();
    }
  }

  $(document).ready(function(){
    $( "#start_date" ).datepicker();
    $( "#end_date" ).datepicker();
    $('#repeat_until').datepicker();
    $("[data-role='datebox']").each(function() {
      $(this).datebox();
    });

    toggleCustomOccuranceWeekDaysSelector()
    toggleCustomOccuranceMonthlySubTypeSelector()
    toggleCustomOccuranceEndsOptions()
    toggleCustomOccuranceFields()
    toggleRepeatUntilField()
    toggleEndDateTimeFieldOnIsMultiDayEventChange()

    $('#event_custom_occurance_every_duration_type').on('change', function(){
      toggleCustomOccuranceWeekDaysSelector()
      toggleCustomOccuranceMonthlySubTypeSelector()
    })

    $('#event_is_multi_day_event').on('change', function(){
      toggleEndDateTimeFieldOnIsMultiDayEventChange();
    })

    $('input[name="event[custom_occurance_ends_on_type]"]').on('change', function(){
      toggleCustomOccuranceEndsOptions()
    })

    $('.dropdown-item.occurance-type').on('click', function(){
      toggleCustomOccuranceFields()
      toggleRepeatUntilField()
    })
  });

  // This sample uses the Autocomplete widget to help the user select a
  // place, then it retrieves the address components associated with that
  // place, and then it populates the form fields with those details.
  // This sample requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script
  // src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

  var placeSearch, autocomplete;

  var componentForm = {
    street_number: 'short_name',
    route: 'long_name',
    locality: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
  };

  function initAutocomplete() {
    // Create the autocomplete object, restricting the search predictions to
    // geographical location types.
    autocomplete = new google.maps.places.Autocomplete(
      document.getElementById('autocomplete'), {types: ['geocode']});

    // Avoid paying for data that you don't need by restricting the set of
    // place fields that are returned to just the address components.
    autocomplete.setFields('address_components');

    // When the user selects an address from the drop-down, populate the
    // address fields in the form.
    autocomplete.addListener('place_changed', fillInAddress);
  }

  function fillInAddress() {
    // Get the place details from the autocomplete object.
    var place = autocomplete.getPlace();

    for (var component in componentForm) {
      document.getElementById(component).value = '';
      document.getElementById(component).disabled = false;
    }

    // Get each component of the address from the place details,
    // and then fill-in the corresponding field on the form.
    for (var i = 0; i < place.address_components.length; i++) {
      var addressType = place.address_components[i].types[0];
      if (componentForm[addressType]) {
        var val = place.address_components[i][componentForm[addressType]];
        document.getElementById(addressType).value = val;
      }
    }
  }

  // Bias the autocomplete object to the user's geographical location,
  // as supplied by the browser's 'navigator.geolocation' object.
  function geolocate() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        var geolocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        var circle = new google.maps.Circle(
          {center: geolocation, radius: position.coords.accuracy});
        autocomplete.setBounds(circle.getBounds());
      });
    }
  }

script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDFzdjvK1HUMNZmivMiJmWMTR_Npjbp3kg&libraries=places&callback=initAutocomplete" async='' defer=''
